{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "covid-reporting254-adf"
		},
		"tr_ingest_population_data_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/36296924-9252-46f1-a144-5997e378937f/resourceGroups/covid-reporting-rg/providers/Microsoft.Storage/storageAccounts/covidreportingsa254"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_PopulationByAge')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_population_raw_tsv",
								"type": "DatasetReference"
							},
							"name": "SourcePopulation"
						},
						{
							"dataset": {
								"referenceName": "ds_LookupCountryCode",
								"type": "DatasetReference"
							},
							"name": "Lookupcountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_populationsink",
								"type": "DatasetReference"
							},
							"name": "sinkPopulation"
						}
					],
					"transformations": [
						{
							"name": "SelectReqd"
						},
						{
							"name": "SplitColumn"
						},
						{
							"name": "SelectReq"
						},
						{
							"name": "Pivot1"
						},
						{
							"name": "MapDrifted",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "LookupCountrycode"
						},
						{
							"name": "SelectRqd"
						}
					],
					"script": "source(output(\n\t\t{indic_de,geo\\time} as string,\n\t\t{2008 } as string,\n\t\t{2009 } as string,\n\t\t{2010 } as string,\n\t\t{2011 } as string,\n\t\t{2012 } as string,\n\t\t{2013 } as string,\n\t\t{2014 } as string,\n\t\t{2015 } as string,\n\t\t{2016 } as string,\n\t\t{2017 } as string,\n\t\t{2018 } as string,\n\t\t{2019 } as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourcePopulation\nsource(output(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tcontinent as string,\n\t\tpopulation as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Lookupcountry\nSourcePopulation select(mapColumn(\n\t\t{indic_de,geo\\time},\n\t\t{2019 }\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqd\nSelectReqd derive(AgeGroup = split({indic_de,geo\\time},',')[1],\n\t\tCountryCode = split({indic_de,geo\\time},',')[2]) ~> SplitColumn\nSplitColumn select(mapColumn(\n\t\tCountryCode,\n\t\tAgeGroup,\n\t\tDataFor2019 = {2019 }\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReq\nSelectReq pivot(groupBy(CountryCode),\n\tpivotBy(AgeGroup),\n\tpercentage = sum(DataFor2019),\n\tcolumnNaming: '$V_$N',\n\tlateral: true) ~> Pivot1\nPivot1 derive(PC_Y0_14_Percentage = toDouble(byName('PC_Y0_14_Percentage')),\n\t\tPC_Y15_24_Percentage = toDouble(byName('PC_Y15_24_Percentage')),\n\t\tPC_Y25_49_Percentage = toDouble(byName('PC_Y25_49_Percentage')),\n\t\tPC_Y50_64_Percentage = toDouble(byName('PC_Y50_64_Percentage')),\n\t\tPC_Y65_79_Percentage = toDouble(byName('PC_Y65_79_Percentage')),\n\t\tPC_Y80_MAX_Percentage = toDouble(byName('PC_Y80_MAX_Percentage'))) ~> MapDrifted\nMapDrifted, Lookupcountry lookup(CountryCode == country_code_2_digit,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCountrycode\nLookupCountrycode select(mapColumn(\n\t\tcountry,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation,\n\t\tPC_Y0_14_Percentage,\n\t\tPC_Y15_24_Percentage,\n\t\tPC_Y25_49_Percentage,\n\t\tPC_Y50_64_Percentage,\n\t\tPC_Y65_79_Percentage,\n\t\tPC_Y80_MAX_Percentage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRqd\nSelectRqd sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkPopulation"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_cases_deaths')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_cases",
								"type": "DatasetReference"
							},
							"name": "sourcecases"
						},
						{
							"dataset": {
								"referenceName": "ds_LookupCountryCode",
								"type": "DatasetReference"
							},
							"name": "LookupCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_ProcessedCases",
								"type": "DatasetReference"
							},
							"name": "SinkCases"
						}
					],
					"transformations": [
						{
							"name": "FilterEuropeOnly"
						},
						{
							"name": "SelectOnlyRequiredFields"
						},
						{
							"name": "PivotCounts"
						},
						{
							"name": "CountryLookup"
						},
						{
							"name": "SelectForSink"
						}
					],
					"script": "source(output(\n\t\tcountry as string,\n\t\tcountry_code as string,\n\t\tcontinent as string,\n\t\tpopulation as integer,\n\t\tindicator as string,\n\t\tdaily_count as integer,\n\t\tdate as date,\n\t\trate_14_day as double,\n\t\tsource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sourcecases\nsource(output(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tcontinent as string,\n\t\tpopulation as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> LookupCountry\nsourcecases filter(continent=='Europe' && not(isNull(country_code))) ~> FilterEuropeOnly\nFilterEuropeOnly select(mapColumn(\n\t\tcountry,\n\t\tcountry_code,\n\t\tpopulation,\n\t\tindicator,\n\t\tdaily_count,\n\t\tsource,\n\t\teach(match(name=='date'),\n\t\t\t'Reported Date' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOnlyRequiredFields\nSelectOnlyRequiredFields pivot(groupBy(country,\n\t\tcountry_code,\n\t\tpopulation,\n\t\tsource,\n\t\t{Reported Date}),\n\tpivotBy(indicator, ['confirmed cases', 'deaths']),\n\tcount = sum(daily_count),\n\tcolumnNaming: '$V_$N',\n\tlateral: true) ~> PivotCounts\nPivotCounts, LookupCountry lookup(PivotCounts@country == LookupCountry@country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> CountryLookup\nCountryLookup select(mapColumn(\n\t\tcountry = LookupCountry@country,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\t{confirmed cases_count},\n\t\tdeaths_count,\n\t\t{Reported Date},\n\t\tpopulation = LookupCountry@population,\n\t\tsource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectForSink\nSelectForSink sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkCases"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_testing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_testing",
								"type": "DatasetReference"
							},
							"name": "SourceTesting"
						},
						{
							"dataset": {
								"referenceName": "ds_LookupCountryCode",
								"type": "DatasetReference"
							},
							"name": "LookupCountry"
						},
						{
							"dataset": {
								"referenceName": "ds_Dim_dateLookup",
								"type": "DatasetReference"
							},
							"name": "LookupWeekdate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_testdata",
								"type": "DatasetReference"
							},
							"name": "DataSink"
						}
					],
					"transformations": [
						{
							"name": "CountryLookup"
						},
						{
							"name": "SelectRequired"
						},
						{
							"name": "DerivedData"
						},
						{
							"name": "AggregateData"
						},
						{
							"name": "JoinData"
						},
						{
							"name": "SelectReqd"
						}
					],
					"script": "source(output(\n\t\tcountry as string,\n\t\tcountry_code as string,\n\t\tyear_week as string,\n\t\tnew_cases as string,\n\t\ttests_done as string,\n\t\tpopulation as string,\n\t\ttesting_rate as string,\n\t\tpositivity_rate as string,\n\t\ttesting_data_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceTesting\nsource(output(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tcontinent as string,\n\t\tpopulation as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> LookupCountry\nsource(output(\n\t\tdate_key as string,\n\t\tdate as string,\n\t\tyear as string,\n\t\tmonth as string,\n\t\tday as string,\n\t\tday_name as string,\n\t\tday_of_year as string,\n\t\tweek_of_month as string,\n\t\tweek_of_year as string,\n\t\tmonth_name as string,\n\t\tyear_month as string,\n\t\tyear_week as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> LookupWeekdate\nSourceTesting, LookupCountry lookup(SourceTesting@country == LookupCountry@country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> CountryLookup\nCountryLookup select(mapColumn(\n\t\tcountry = LookupCountry@country,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tyear_week,\n\t\ttests_done,\n\t\ttesting_rate,\n\t\tnew_cases,\n\t\tpositivity_rate,\n\t\ttesting_data_source,\n\t\tpopulation = LookupCountry@population\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequired\nLookupWeekdate derive(ecdc_year_week = year + '-W' + lpad(week_of_year,2,'0')) ~> DerivedData\nDerivedData aggregate(groupBy(ecdc_year_week),\n\tweek_start_date = min(date),\n\t\tweek_end_date = max(date)) ~> AggregateData\nSelectRequired, AggregateData join(year_week == ecdc_year_week,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinData\nJoinData select(mapColumn(\n\t\tcountry,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tyear_week,\n\t\ttests_done,\n\t\ttesting_rate,\n\t\tnew_cases,\n\t\tpositivity_rate,\n\t\ttesting_data_source,\n\t\tpopulation,\n\t\tweek_start_date,\n\t\tweek_end_date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqd\nSelectReqd sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DataSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transforms_hospital_Admissions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_hospital_admission",
								"type": "DatasetReference"
							},
							"name": "HospitalAdmissiinsSource"
						},
						{
							"dataset": {
								"referenceName": "ds_LookupCountryCode",
								"type": "DatasetReference"
							},
							"name": "countrySource"
						},
						{
							"dataset": {
								"referenceName": "ds_Dim_dateLookup",
								"type": "DatasetReference"
							},
							"name": "DimDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_Admissions_weekly",
								"type": "DatasetReference"
							},
							"name": "weeklySink"
						},
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_Admissions_daily",
								"type": "DatasetReference"
							},
							"name": "dailySink"
						}
					],
					"transformations": [
						{
							"name": "SelectReqdFields"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectRequiredFields"
						},
						{
							"name": "SplitDailyFromweekly"
						},
						{
							"name": "DeriveECDCYearWeek"
						},
						{
							"name": "AggDimDate"
						},
						{
							"name": "JoinWithDate"
						},
						{
							"name": "PivotWeekly"
						},
						{
							"name": "PivotDaily"
						},
						{
							"name": "SortWeekly"
						},
						{
							"name": "SortDaily"
						},
						{
							"name": "SelectWeekly"
						},
						{
							"name": "SelectDaily"
						}
					],
					"script": "source(output(\n\t\tcountry as string,\n\t\tindicator as string,\n\t\tdate as date,\n\t\tyear_week as string,\n\t\tvalue as double,\n\t\tsource as string,\n\t\turl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> HospitalAdmissiinsSource\nsource(output(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tcontinent as string,\n\t\tpopulation as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> countrySource\nsource(output(\n\t\tdate_key as string,\n\t\tdate as string,\n\t\tyear as string,\n\t\tmonth as string,\n\t\tday as string,\n\t\tday_name as string,\n\t\tday_of_year as string,\n\t\tweek_of_month as string,\n\t\tweek_of_year as string,\n\t\tmonth_name as string,\n\t\tyear_month as string,\n\t\tyear_week as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DimDataSource\nHospitalAdmissiinsSource select(mapColumn(\n\t\tcountry,\n\t\tindicator,\n\t\treported_date = date,\n\t\treported_year_week = year_week,\n\t\tvalue,\n\t\tsource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqdFields\nSelectReqdFields, countrySource lookup(SelectReqdFields@country == countrySource@country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tcountry = SelectReqdFields@country,\n\t\tindicator,\n\t\treported_date,\n\t\treported_year_week,\n\t\tvalue,\n\t\tsource,\n\t\tcountry = countrySource@country,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredFields\nSelectRequiredFields split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',\n\tdisjoint: false) ~> SplitDailyFromweekly@(Weekly, Daily)\nDimDataSource derive(ecdc_year_week = year + '-W' + lpad(week_of_year,2,'0')) ~> DeriveECDCYearWeek\nDeriveECDCYearWeek aggregate(groupBy(ecdc_year_week),\n\tweek_start_date = min(date),\n\t\tweek_end_date = max(date)) ~> AggDimDate\nSplitDailyFromweekly@Weekly, AggDimDate join(reported_year_week == ecdc_year_week,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWithDate\nJoinWithDate pivot(groupBy(country,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation,\n\t\treported_year_week,\n\t\tweek_start_date,\n\t\tweek_end_date,\n\t\tsource),\n\tpivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),\n\tcount = sum(value),\n\tcolumnNaming: '$V_$N',\n\tlateral: true) ~> PivotWeekly\nSplitDailyFromweekly@Daily pivot(groupBy(country,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation,\n\t\treported_date,\n\t\tsource),\n\tpivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),\n\tcount = sum(value),\n\tcolumnNaming: '$V_$N',\n\tlateral: true) ~> PivotDaily\nPivotWeekly sort(desc(reported_year_week, true),\n\tasc(country, true)) ~> SortWeekly\nPivotDaily sort(asc(reported_date, true),\n\tasc(country, true)) ~> SortDaily\nSortWeekly select(mapColumn(\n\t\tcountry,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation,\n\t\treported_year_week,\n\t\treported_week_start_date = week_start_date,\n\t\treported_week_end_date = week_end_date,\n\t\tnew_hospital_occupancycount = {Weekly new hospital admissions per 100k_count},\n\t\tnew_ICU_occupancycount = {Weekly new ICU admissions per 100k_count},\n\t\tsource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectWeekly\nSortDaily select(mapColumn(\n\t\tcountry,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation,\n\t\treported_date,\n\t\t{hospital occupancy_count} = {Daily hospital occupancy_count},\n\t\t{ICU occupancy_count} = {Daily ICU occupancy_count},\n\t\tsource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDaily\nSelectWeekly sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> weeklySink\nSelectDaily sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dailySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_HospitalAdmissions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "processed_Hospital Admissions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transforms_hospital_Admissions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HospitalAdmissiinsSource": {},
									"countrySource": {},
									"DimDataSource": {},
									"weeklySink": {},
									"dailySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transforms_hospital_Admissions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ProcessedCases')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "processed cases",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_cases_deaths",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcecases": {},
									"LookupCountry": {},
									"SinkCases": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_cases_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_testcase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Test cases",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_testing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceTesting": {},
									"LookupCountry": {},
									"LookupWeekdate": {},
									"DataSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_testing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_hospital_admission_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_ecdc_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-06-04T11:44:00",
						"timeZone": "Arabian Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_population_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_population_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/population/blobs/population_by_age.tsv.gz",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_ingest_population_data_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}